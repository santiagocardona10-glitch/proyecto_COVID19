"""
Aplicaci√≥n principal para consultar datos de COVID-19 en Colombia

Proyecto: Fundamentos B√°sicos de Python
Docente: Alejandro Rodas V√°squez
Universidad Tecnol√≥gica de Pereira
"""

# Importar m√≥dulos del proyecto
from api import api_module
from ui import ui_module


def main():
    """
    Funci√≥n principal que controla el flujo de la aplicaci√≥n
    """
    print("üöÄ Iniciando aplicaci√≥n COVID-19...")

    # Verificar dependencias al inicio
    try:
        import pandas as pd
        import sodapy
        print("‚úÖ Dependencias verificadas correctamente")
    except ImportError as e:
        print(f"‚ùå Error: Falta instalar dependencias: {e}")
        print("   Ejecute: pip install pandas sodapy")
        return

    while True:
        try:
            # Mostrar men√∫ principal
            ui_module.mostrar_menu()

            # Obtener opci√≥n del usuario
            opcion = input("\nüîç Seleccione una opci√≥n (1-2): ").strip()

            if opcion == "1":
                print("\nüîç NUEVA CONSULTA INICIADA")

                # Obtener par√°metros del usuario
                nombre_departamento, limite_registros = ui_module.solicitar_parametros()

                print(f"\n‚è≥ Procesando consulta...")
                print(f"   üìç Departamento: {nombre_departamento}")
                print(f"   üìä Registros solicitados: {limite_registros}")

                # Realizar consulta a la API
                datos_raw = api_module.consultar_datos_covid(
                    nombre_departamento,
                    limite_registros
                )

                # Si falla la consulta por departamento, intentar m√©todo alternativo
                if datos_raw is None or datos_raw.empty:
                    print("\nüîÑ Intentando consulta general...")
                    datos_raw = api_module.consultar_datos_covid_alternativo(limite_registros)

                    # Si obtuvimos datos, filtrar por departamento localmente
                    if datos_raw is not None and not datos_raw.empty:
                        if 'departamento_nom' in datos_raw.columns:
                            # Filtrar por departamento localmente
                            mask = datos_raw['departamento_nom'].str.upper().str.contains(
                                nombre_departamento.upper(), na=False
                            )
                            datos_departamento = datos_raw[mask]

                            if not datos_departamento.empty:
                                datos_raw = datos_departamento
                                print(f"‚úÖ Filtrado local: {len(datos_raw)} registros para {nombre_departamento}")
                            else:
                                print(f"‚ö†Ô∏è No se encontraron datos para {nombre_departamento}")
                                print("   Mostrando muestra de datos generales...")
                                datos_raw = datos_raw.head(10)

                if datos_raw is not None and not datos_raw.empty:
                    # Filtrar y mostrar resultados
                    datos_filtrados = api_module.filtrar_columnas_relevantes(datos_raw)
                    ui_module.mostrar_resultados(datos_filtrados)




                else:
                    print("\n CONSULTA SIN RESULTADOS")
                    print("   Posibles causas:")
                    print("   ‚Ä¢ Nombre del departamento incorrecto")
                    print("   ‚Ä¢ Problemas de conectividad")
                    print("   ‚Ä¢ API temporalmente no disponible")
                    print("\n Sugerencias:")
                    print("   ‚Ä¢ Verifique la ortograf√≠a del departamento")
                    print("   ‚Ä¢ Use nombres en MAY√öSCULAS")
                    print("   ‚Ä¢ Intente con otro departamento")

                input("\n‚è∏Ô∏è  Presione Enter para continuar...")

            elif opcion == "2":
                print("\nüëã ¬°Gracias por usar la aplicaci√≥n!")
                print("   Desarrollado para Universidad Tecnol√≥gica de Pereira")
                break

            else:
                print("\n‚ùå Opci√≥n no v√°lida. Por favor seleccione 1 o 2")

        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è Aplicaci√≥n interrumpida por el usuario")
            print("üëã ¬°Hasta pronto!")
            break

        except Exception as e:
            print(f"\n‚ùå Error inesperado: {e}")
            print("üîÑ La aplicaci√≥n continuar√° ejecut√°ndose...")
            input("\n‚è∏Ô∏è  Presione Enter para continuar...")


if __name__ == "__main__":
    main()